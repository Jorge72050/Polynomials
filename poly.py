"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, <Jorge Nunez> and <Vivian Zhang>, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: jn29423
UT EID 2: wz5363
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    "Initializing and definitng instance variables and methods for the linked list class."
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None
        self.size = 0

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        """
        Inserting a term with a coeff and exp into the polynomial."
        """
        term = Node(coeff, exp)

        # Keep track of whether coeff changes ??
        # Base cases
        if coeff == 0:
            return
        if self.head is None:
            self.head = term
            self.size += 1
            return
        if term.exp > self.head.exp:
            term.next = self.head
            self.head = term
            self.size += 1
            return
        current = self.head

        # Case 1 - exponent is in the linked list

        # Want to reach the term with matching exponents,
        # Have current point to the term w/ matching exponent
        # Keep track of previous if terms cancel out
        while current is not None:
            # Loops until the list reaches the end, adds coeffs
            # Together if a common exponent is found
            if current.exp == term.exp:
                current.coeff += term.coeff
                #val = term.coeff - current.coeff
                return
            previous = current
            current = current.next
        # Skips current if the coeff sums to 0
        if current is not None and current.coeff == 0:
            previous.next = current.next
            return

        # Case 2 - Exponent was not found, insert it
        current = self.head
        while current.next is not None:
            current = current.next
            self.size += 1
        current = self.head
        while current is not None and current.exp > term.exp:
            previous = current
            current = current.next
        term.next = current
        previous.next = term

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        """
        Adding polynomials together.
        """

        # p is a linked list
        new_list = LinkedList()
        current = self.head
        current1 = p.head
        if current1 is None:
            return self
        if current is None:
            return p
        while current is not None and current1 is not None and self.size == 1 and p.size == 1:
            # Both lists are of size 1 and one exponent is greater than other
            if current.exp > current1.exp:
                new_list.insert_term(current.coeff, current.exp)
                new_list.insert_term(current1.coeff, current1.exp)
            elif current.exp < current1.exp:
                new_list.insert_term(current1.coeff, current1.exp)
                new_list.insert_term(current.coeff, current.exp)
            else:
                current.coeff += current1.coeff
                if current.coeff == 0:
                    return new_list
                new_list.insert_term(current.coeff, current.exp)
            return new_list
            # current = current.next
            # current1 = current1.next

        # Sizes of lists are not 1
        if current is not None and p is not None and current.exp > current1.exp:
            while current.exp > current1:
                new_list.insert_term(current.coeff, current.exp)
                current = current.next
                self.size -= 1
            while self.size > 0:
                new_coeff = current.coeff + current1.coeff
                if new_coeff > 0:
                    new_list.insert_term(new_coeff, current.exp)
                current = current.next
                current1 = current1.next
                self.size -= 1
                p.size -= 1
            while p.size > 0:
                new_list.insert_term(current1.coeff, current1.exp)
                current1 = current1.next
                p.size -= 1

        elif current is not None and p is not None and current.exp < current1.exp:
            while p.size > self.size:
                new_list.insert_term(current.coeff, current.exp)
                current1 = current1.next
                p.size -= 1
            while p.size > 0:
                new_coeff = current.coeff + current1.coeff
                if new_coeff > 0:
                    new_list.insert_term(new_coeff, current.exp)
                current = current.next
                current1 = current1.next
                self.size -= 1
                p.size -= 1
            while self.size > 0:
                new_list.insert_term(current.coeff, current.exp)
                current = current.next
                self.size -= 1
        
        return new_list
        # while current.head 
        # while current is not None:
        #     new_list.insert_term(current.coeff, current.exp)
        #     current += 1
        # while current1 is not None:
        #     new_list.insert_term(current1.coeff, current.exp)
        #     current1 += 1


    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        """
        Multiplying polynomials, returning product as a linked list."""
        new_list = LinkedList()
        current = self.head
        current1 = p.head
        count = self.size
        multiply_list = LinkedList()
        if current1 is None:
            return self
        if current is None:
            return p
        while current1 is not None and count != 0:
            new_coeff = current.coeff * current1.coeff
            new_exp = current.exp + current1.exp
            current1 = current1.next
            new_list.insert_term(new_coeff, new_exp)
        count -= 1
        while current1 is not None and current is not None and count != 0:
            current1 = p.head
            multiply_list = LinkedList()
            while current1 is not None:
                new_coeff = current.coeff * current1.coeff
                new_exp = current.exp + current1.exp
                multiply_list.insert_term(new_coeff, new_exp)
                current1 = current1.next
            new_list = new_list.add(multiply_list)
            count -= 1
            current = current.next
        return new_list
  
    # Return a string representation of the polynomial.
    def __str__(self):
        pass


def main():
    "Calling functions and reading from a file"
    # read data from stdin (terminal/file) using input() and create polynomial p

    # read data from stdin (terminal/file) using input() and create polynomial q

    # get sum of p and q as a new linked list and print sum

    # get product of p and q as a new linked list and print product
    poly1 = LinkedList()
    poly1.insert_term(2,5)
    poly1.insert_term(1,3)



if __name__ == "__main__":
    main()
